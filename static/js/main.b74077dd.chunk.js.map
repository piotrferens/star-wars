{"version":3,"sources":["components/cards/ResourceCard.tsx","pages/ChooseResource.tsx","components/ErrorMessage.tsx","components/skeletons/CardSkeleton.tsx","components/skeletons/PlaygroundSkeleton.tsx","components/FetchResource.tsx","utils/uniqueNumbers.tsx","components/Playground.tsx","GameContext.tsx","components/cards/PlayCard.tsx","utils/getCardColor.tsx","components/BattleArena.tsx","components/BackButton.tsx","utils/selectWinners.tsx","pages/People.tsx","pages/Starships.tsx","swrConfig.ts","index.tsx","App.tsx"],"names":["useStyles","makeStyles","theme","cardHeader","backgroundColor","palette","grey","image","maxWidth","maxHeight","link","color","textDecoration","ResourceCard","title","src","path","classes","Grid","item","xs","md","Card","CardHeader","titleTypographyProps","align","className","to","CardActionArea","CardContent","alt","Box","textAlign","m","Typography","variant","ChooseResource","component","fontSize","container","spacing","alignItems","justify","error","dark","marginTop","message","display","icon","opacity","marginRight","ErrorMessage","text","onRetryClick","SnackbarContent","aria-describedby","id","action","Button","onClick","grid","card","minWidth","height","CardSkeleton","Skeleton","PlaygroundSkeleton","width","FetchResource","children","url","useSWR","data","revalidate","isValidating","getUniqueRandomNumbers","count","min","max","limit","uniqueRandoms","elem","Math","floor","random","includes","push","length","box","span","marginLeft","Playground","selectWinner","useState","numberOfGames","setNumberOfGames","resources","setResources","player","opponent","role","aria-label","initialState","people","leftSideWins","rightSideWins","starships","GameStateContext","React","createContext","GameContextDispatch","gameReducer","state","type","payload","GameContext","props","useReducer","dispatch","Provider","value","PlayCard","name","style","border","colors","draw","win","lose","getCardColor","winner","side","counter","fontWeight","BattleArena","playerName","opponentName","playerValue","opponentValue","game","resource","gameState","useContext","gameDispatch","playerCardColor","opponentCardColor","useEffect","data-testid","button","position","left","BackButton","history","useHistory","goBack","selectPeopleWinner","playerMass","Number","mass","opponentMass","selectStarshipsWinner","playerCrew","crew","getSideWinner","People","Starships","swrConfig","fetcher","requestInfo","requestInit","fetch","then","res","status","Error","json","errorRetryInterval","shouldRetryOnError","revalidateOnFocus","ReactDOM","render","CssBaseline","Container","exact","document","getElementById"],"mappings":"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","file":"static/js/main.b74077dd.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport Box from '@material-ui/core/Box'\n\nconst useStyles = makeStyles(theme => ({\n    cardHeader: {\n        backgroundColor: theme.palette.grey[200]\n    },\n    image: {\n        maxWidth: '100%',\n        maxHeight: '100%'\n    },\n    link: {\n        color: 'inherit',\n        textDecoration: 'none'\n    }\n}))\n\ninterface Props {\n    title: string\n    src: string\n    path: string\n}\n\nexport function ResourceCard({ title, src, path }: Props) {\n    const classes = useStyles()\n\n    return (\n        <Grid item xs={12} md={4}>\n            <Card>\n                <CardHeader\n                    title={title}\n                    titleTypographyProps={{ align: 'center' }}\n                    className={classes.cardHeader}\n                />\n                <Link to={path} className={classes.link}>\n                    <CardActionArea>\n                        <CardContent>\n                            <img className={classes.image} src={src} alt=\"\" />\n                        </CardContent>\n                        <Box textAlign=\"center\" m={1}>\n                            <Typography variant=\"button\" color=\"primary\" align=\"center\">\n                                Choose\n                            </Typography>\n                        </Box>\n                    </CardActionArea>\n                </Link>\n            </Card>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\n\nimport { ResourceCard } from '../components/cards/ResourceCard'\n\nexport function ChooseResource() {\n    return (\n        <>\n            <Typography component=\"div\">\n                <Box textAlign=\"center\" fontSize={22} m={3}>\n                    Choose a resource you want to play\n                </Box>\n            </Typography>\n            <Grid container spacing={5} alignItems=\"flex-end\" justify=\"center\">\n                <ResourceCard\n                    title=\"People\"\n                    src=\"https://icon-library.net/images/luke-skywalker-icon/luke-skywalker-icon-8.jpg\"\n                    path=\"/people\"\n                />\n                <ResourceCard\n                    title=\"Starships\"\n                    src=\"https://vignette.wikia.nocookie.net/starwars/images/6/69/Various_ships-SWU.jpg/revision/latest?cb=20170401153204\"\n                    path=\"/starships\"\n                />\n            </Grid>\n        </>\n    )\n}\n","import React from 'react'\n\nimport { Theme } from '@material-ui/core/styles'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Button from '@material-ui/core/Button'\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\nimport WarningIcon from '@material-ui/icons/Warning'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    error: {\n        backgroundColor: theme.palette.error.dark,\n        marginTop: 20\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    icon: {\n        fontSize: 20,\n        opacity: 0.9,\n        marginRight: theme.spacing(1)\n    }\n}))\n\ninterface Props {\n    text: string\n    onRetryClick?(): void\n}\n\nexport function ErrorMessage({ text, onRetryClick }: Props) {\n    const classes = useStyles()\n\n    return (\n        <SnackbarContent\n            className={classes.error}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <WarningIcon className={classes.icon} />\n                    {text}\n                </span>\n            }\n            action={\n                <>\n                    {onRetryClick && (\n                        <Button onClick={onRetryClick} color=\"inherit\">\n                            Retry\n                        </Button>\n                    )}\n                </>\n            }\n        />\n    )\n}\n","import React from 'react'\n\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Skeleton from '@material-ui/lab/Skeleton'\n\nconst useStyles = makeStyles(() => ({\n    grid: {\n        marginTop: 20\n    },\n    card: {\n        minWidth: 275,\n        height: 96\n    },\n    title: {\n        fontSize: 14\n    }\n}))\n\nexport function CardSkeleton() {\n    const classes = useStyles()\n\n    return (\n        <Grid item xs={12} md={4}>\n            <Card className={classes.card}>\n                <CardContent>\n                    <Skeleton height={21} />\n                    <Skeleton height={31} />\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport makeStyles from '@material-ui/styles/makeStyles'\nimport Grid from '@material-ui/core/Grid'\nimport Skeleton from '@material-ui/lab/Skeleton'\n\nimport { CardSkeleton } from './CardSkeleton'\n\nconst useStyles = makeStyles({\n    grid: {\n        marginTop: 20\n    }\n})\n\nexport function PlaygroundSkeleton() {\n    const classes = useStyles()\n\n    return (\n        <>\n            <Grid\n                container\n                spacing={5}\n                alignItems=\"center\"\n                justify=\"center\"\n                className={classes.grid}\n            >\n                <Skeleton variant=\"rect\" width={20} height={20} />\n                <CardSkeleton />\n                <div>VS</div>\n                <CardSkeleton />\n                <Skeleton variant=\"rect\" width={20} height={20} />\n            </Grid>\n            <Grid container justify=\"center\" spacing={5} className={classes.grid}>\n                <Skeleton variant=\"rect\" width={120} height={36} />\n            </Grid>\n        </>\n    )\n}\n","import React from 'react'\nimport useSWR from 'swr'\n\nimport { ErrorMessage } from './ErrorMessage'\nimport { PlaygroundSkeleton } from './skeletons/PlaygroundSkeleton'\n\ninterface Props {\n    children(data: { count: number }): React.ReactNode\n    url: string\n}\n\nexport function FetchResource({ children, url }: Props) {\n    const { data, error, revalidate, isValidating } = useSWR(url)\n\n    if (error && !isValidating) {\n        return (\n            <ErrorMessage onRetryClick={revalidate} text=\"There was a problem with swapi.co 😢.\" />\n        )\n    }\n\n    return <>{data ? children(data) : <PlaygroundSkeleton />}</>\n}\n","function getRandomNumber(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function getUniqueRandomNumbers(\n    count: number,\n    limit = 2,\n    uniqueRandoms: number[] = []\n): number[] {\n    const elem = getRandomNumber(1, count)\n\n    if (uniqueRandoms.includes(elem)) {\n        return getUniqueRandomNumbers(count, limit, uniqueRandoms)\n    } else {\n        uniqueRandoms.push(elem)\n    }\n\n    if (uniqueRandoms.length === limit) {\n        return uniqueRandoms\n    }\n\n    return getUniqueRandomNumbers(count, limit, uniqueRandoms)\n}\n","import React, { useState } from 'react'\nimport useSWR from 'swr'\n\nimport Grid from '@material-ui/core/Grid'\nimport makeStyles from '@material-ui/styles/makeStyles'\nimport Button from '@material-ui/core/Button'\nimport Box from '@material-ui/core/Box'\n\nimport { ErrorMessage } from './ErrorMessage'\nimport { PlaygroundSkeleton } from './skeletons/PlaygroundSkeleton'\n\nimport { getUniqueRandomNumbers } from '../utils/uniqueNumbers'\n\nconst useStyles = makeStyles({\n    grid: {\n        marginTop: 20\n    },\n    box: {\n        textAlign: 'center',\n        marginTop: 20\n    },\n    span: {\n        marginLeft: 6\n    }\n})\n\ninterface PlaygroundProps<T> {\n    url: '/people/' | '/starships/'\n    count: number\n    children(player: T, opponent: T, winner: T | 'draw', game: number): React.ReactNode\n    selectWinner(player: T, opponent: T): T | 'draw'\n}\n\nexport function Playground<T>({ count, url, children, selectWinner }: PlaygroundProps<T>) {\n    const classes = useStyles()\n    const [numberOfGames, setNumberOfGames] = useState(0)\n    const [resources, setResources] = useState(getUniqueRandomNumbers(count))\n\n    const player = useSWR(`${url}${resources[0]}/`)\n    const opponent = useSWR(`${url}${resources[1]}/`)\n\n    if (!player.isValidating && !opponent.isValidating && (player.error || opponent.error)) {\n        return (\n            <ErrorMessage\n                text=\"Failed to fetch players\"\n                onRetryClick={() => {\n                    player.revalidate()\n                    opponent.revalidate()\n                }}\n            />\n        )\n    }\n\n    if (!player.data || !opponent.data) {\n        return <PlaygroundSkeleton />\n    }\n\n    const onPlayAgain = () => {\n        setResources(getUniqueRandomNumbers(count))\n        setNumberOfGames(numberOfGames + 1)\n    }\n\n    return (\n        <>\n            <Grid\n                container\n                spacing={5}\n                alignItems=\"center\"\n                justify=\"center\"\n                className={classes.grid}\n            >\n                {children(\n                    player.data,\n                    opponent.data,\n                    selectWinner(player.data, opponent.data),\n                    numberOfGames\n                )}\n            </Grid>\n            <Box className={classes.box}>\n                <Button onClick={onPlayAgain}>\n                    Play again\n                    <span className={classes.span} role=\"img\" aria-label=\"Swords\">\n                        ⚔️\n                    </span>\n                </Button>\n            </Box>\n        </>\n    )\n}\n","import React from 'react'\n\nconst initialState = {\n    people: {\n        leftSideWins: 0,\n        rightSideWins: 0\n    },\n    starships: {\n        leftSideWins: 0,\n        rightSideWins: 0\n    }\n}\n\nconst dispatchMock: React.Dispatch<Action> = () => {}\nconst GameStateContext = React.createContext(initialState)\nconst GameContextDispatch = React.createContext(dispatchMock)\n\nexport type Resource = 'people' | 'starships'\n\ntype Action =\n    | { type: 'INCREMENT_LEFT_SIDE_WINS'; payload: Resource }\n    | { type: 'INCREMENT_RIGHT_SIDE_WINS'; payload: Resource }\n\nfunction gameReducer(state: typeof initialState, action: Action) {\n    switch (action.type) {\n        case 'INCREMENT_LEFT_SIDE_WINS':\n            return {\n                ...state,\n                [action.payload]: {\n                    ...state[action.payload],\n                    leftSideWins: state[action.payload].leftSideWins + 1\n                }\n            }\n        case 'INCREMENT_RIGHT_SIDE_WINS':\n            return {\n                ...state,\n                [action.payload]: {\n                    ...state[action.payload],\n                    rightSideWins: state[action.payload].rightSideWins + 1\n                }\n            }\n        default:\n            return state\n    }\n}\n\nexport function GameContext(props: { children: React.ReactNode }) {\n    const [state, dispatch] = React.useReducer(gameReducer, initialState)\n\n    return (\n        <GameStateContext.Provider value={state}>\n            <GameContextDispatch.Provider value={dispatch}>\n                {props.children}\n            </GameContextDispatch.Provider>\n        </GameStateContext.Provider>\n    )\n}\n\nexport function useGameState() {\n    return React.useContext(GameStateContext)\n}\n\nexport function useGameDispatch() {\n    return React.useContext(GameContextDispatch)\n}\n","import React from 'react'\n\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n\nconst useStyles = makeStyles({\n    card: {\n        minWidth: 275\n    },\n    title: {\n        fontSize: 14\n    }\n})\n\ninterface Props {\n    name: string\n    value: string\n    color: string\n}\n\nexport function PlayCard({ name, value, color }: Props) {\n    const classes = useStyles()\n\n    return (\n        <Grid item xs={12} md={4}>\n            <Card className={classes.card} style={{ border: `2px solid ${color}` }}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" align=\"center\">\n                        {name}\n                    </Typography>\n                    <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                        {value}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}\n","export const colors = {\n    draw: '#ef6c00',\n    win: '#2e7d32',\n    lose: '#d50000'\n}\n\nexport function getCardColor(winner: 'draw' | 'left' | 'right', side: 'left' | 'right') {\n    return winner === 'draw' ? colors.draw : side === winner ? colors.win : colors.lose\n}\n","import React, { useEffect } from 'react'\n\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nimport { useGameDispatch, useGameState, Resource } from '../GameContext'\nimport { PlayCard } from './cards/PlayCard'\nimport { getCardColor } from '../utils/getCardColor'\n\nconst useStyles = makeStyles({\n    counter: {\n        fontSize: 18,\n        fontWeight: 'bold'\n    }\n})\n\ninterface BattleArenaProps {\n    playerName: string\n    opponentName: string\n    playerValue: string\n    opponentValue: string\n    game: number\n    winner: 'draw' | 'left' | 'right'\n    resource: Resource\n}\n\nexport function BattleArena({\n    playerName,\n    opponentName,\n    playerValue,\n    opponentValue,\n    winner,\n    game,\n    resource\n}: BattleArenaProps) {\n    const classes = useStyles()\n\n    const gameState = useGameState()\n    const gameDispatch = useGameDispatch()\n\n    const playerCardColor = getCardColor(winner, 'left')\n    const opponentCardColor = getCardColor(winner, 'right')\n\n    useEffect(() => {\n        if (winner === 'left') {\n            gameDispatch({ type: 'INCREMENT_LEFT_SIDE_WINS', payload: resource })\n        } else if (winner === 'right') {\n            gameDispatch({ type: 'INCREMENT_RIGHT_SIDE_WINS', payload: resource })\n        }\n    }, [game, winner, gameDispatch, resource])\n\n    return (\n        <>\n            <div className={classes.counter} data-testid=\"leftCounter\">\n                {gameState[resource].leftSideWins}\n            </div>\n            <PlayCard name={playerName} value={playerValue} color={playerCardColor} />\n            <div>VS</div>\n            <PlayCard name={opponentName} value={opponentValue} color={opponentCardColor} />\n            <div className={classes.counter} data-testid=\"rightCounter\">\n                {gameState[resource].rightSideWins}\n            </div>\n        </>\n    )\n}\n","import React from 'react'\nimport { useHistory } from 'react-router'\n\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport Button from '@material-ui/core/Button'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\n\nconst useStyles = makeStyles({\n    button: {\n        position: 'absolute',\n        left: 0\n    }\n})\n\nexport function BackButton() {\n    const classes = useStyles()\n    const history = useHistory()\n\n    return (\n        <Button onClick={history.goBack} className={classes.button}>\n            <ArrowBackIcon fontSize=\"large\" />\n        </Button>\n    )\n}\n","import { Person } from '../models/Person'\nimport { Starship } from '../models/Starship'\n\nexport const selectPeopleWinner = (player: Person, opponent: Person) => {\n    const playerMass = Number(player.mass)\n    const opponentMass = Number(opponent.mass)\n\n    if (playerMass > opponentMass) {\n        return player\n    } else if (opponentMass > playerMass) {\n        return opponent\n    }\n\n    return 'draw'\n}\n\nexport const selectStarshipsWinner = (player: Starship, opponent: Starship) => {\n    const playerCrew = Number(player.crew)\n    const opponentMass = Number(opponent.crew)\n\n    if (playerCrew > opponentMass) {\n        return player\n    } else if (opponentMass > playerCrew) {\n        return opponent\n    }\n\n    return 'draw'\n}\n\nexport function getSideWinner<T extends any>(winner: T | 'draw', player: T) {\n    return winner === 'draw' ? 'draw' : winner.name === player.name ? 'left' : 'right'\n}\n","import React from 'react'\n\nimport { FetchResource } from '../components/FetchResource'\nimport { Playground } from '../components/Playground'\nimport { BattleArena } from '../components/BattleArena'\nimport { BackButton } from '../components/BackButton'\n\nimport { Person } from '../models/Person'\n\nimport { selectPeopleWinner, getSideWinner } from '../utils/selectWinners'\n\nexport function People() {\n    return (\n        <>\n            <BackButton />\n            <FetchResource url=\"/people/\">\n                {data => (\n                    <Playground<Person>\n                        count={data.count}\n                        url=\"/people/\"\n                        selectWinner={selectPeopleWinner}\n                    >\n                        {(player, opponent, winner, game) => (\n                            <BattleArena\n                                playerName={player.name}\n                                playerValue={player.mass}\n                                opponentName={opponent.name}\n                                opponentValue={opponent.mass}\n                                winner={getSideWinner(winner, player)}\n                                game={game}\n                                resource=\"people\"\n                            />\n                        )}\n                    </Playground>\n                )}\n            </FetchResource>\n        </>\n    )\n}\n","import React from 'react'\n\nimport { FetchResource } from '../components/FetchResource'\nimport { Playground } from '../components/Playground'\nimport { BattleArena } from '../components/BattleArena'\nimport { BackButton } from '../components/BackButton'\n\nimport { Starship } from '../models/Starship'\n\nimport { selectStarshipsWinner, getSideWinner } from '../utils/selectWinners'\n\nexport function Starships() {\n    return (\n        <>\n            <BackButton />\n            <FetchResource url=\"/starships/\">\n                {data => (\n                    <Playground<Starship>\n                        count={data.count}\n                        url=\"/starships/\"\n                        selectWinner={selectStarshipsWinner}\n                    >\n                        {(player, opponent, winner, game) => (\n                            <BattleArena\n                                playerName={player.name}\n                                playerValue={player.crew}\n                                opponentName={opponent.name}\n                                opponentValue={opponent.crew}\n                                winner={getSideWinner(winner, player)}\n                                game={game}\n                                resource=\"starships\"\n                            />\n                        )}\n                    </Playground>\n                )}\n            </FetchResource>\n        </>\n    )\n}\n","import { ConfigInterface } from 'swr'\n\nconst fetcher = (requestInfo: RequestInfo, requestInit?: RequestInit) => {\n    return fetch('https://swapi.co/api' + requestInfo, requestInit).then(res => {\n        if (res.status >= 400) {\n            throw new Error('Failed to fetch')\n        }\n        return res.json()\n    })\n}\n\nexport const swrConfig: ConfigInterface = {\n    fetcher,\n    errorRetryInterval: 0,\n    shouldRetryOnError: false,\n    revalidateOnFocus: false\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport 'typeface-roboto'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport { App } from './App'\n\nReactDOM.render(\n    <Router>\n        <CssBaseline />\n        <App />\n    </Router>,\n    document.getElementById('root')\n)\n","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router'\n\nimport Container from '@material-ui/core/Container'\n\nimport { ChooseResource } from './pages/ChooseResource'\nimport { People } from './pages/People'\nimport { Starships } from './pages/Starships'\nimport { GameContext } from './GameContext'\nimport { SWRConfig } from 'swr'\nimport { swrConfig } from './swrConfig'\n\nexport function App() {\n    return (\n        <SWRConfig value={swrConfig}>\n            <GameContext>\n                <Container maxWidth=\"md\" component=\"main\">\n                    <Switch>\n                        <Route exact path=\"/\" component={ChooseResource} />\n                        <Route path=\"/people\" component={People} />\n                        <Route path=\"/starships\" component={Starships} />\n                        <Redirect to=\"/\" />\n                    </Switch>\n                </Container>\n            </GameContext>\n        </SWRConfig>\n    )\n}\n"],"sourceRoot":""}